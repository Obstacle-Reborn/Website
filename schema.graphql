type QueryRoot {
        players(after: String, before: String, first: Int, last: Int): PlayerConnection!
        maps(after: String, before: String, first: Int, last: Int): MapConnection!
        node(id: ID!): Node
        map(gameId: String!): Map!
        player(login: String!): Player!
        records: [RankedRecord!]!
}
type PlayerConnection {
        """
        Information to aid in pagination.
        """
        pageInfo: PageInfo!
        """
        A list of edges.
        """
        edges: [PlayerEdge]
}
"""
Information about pagination in a connection
"""
type PageInfo {
        """
        When paginating backwards, are there more items?
        """
        hasPreviousPage: Boolean!
        """
        When paginating forwards, are there more items?
        """
        hasNextPage: Boolean!
        """
        When paginating backwards, the cursor to continue.
        """
        startCursor: String
        """
        When paginating forwards, the cursor to continue.
        """
        endCursor: String
}
"""
An edge in a connection.
"""
type PlayerEdge {
        """
        The item at the end of the edge
        """
        node: Player!
        """
        A cursor for use in pagination
        """
        cursor: String!
}
type Player implements Node {
        id: ID!
        login: String!
        name: String!
        maps(after: String, before: String, first: Int, last: Int): MapConnection!
        records: [RankedRecord!]!
}
type MapConnection {
        """
        Information to aid in pagination.
        """
        pageInfo: PageInfo!
        """
        A list of edges.
        """
        edges: [MapEdge]
}
"""
An edge in a connection.
"""
type MapEdge {
        """
        The item at the end of the edge
        """
        node: Map!
        """
        A cursor for use in pagination
        """
        cursor: String!
}
type Map implements Node {
        id: ID!
        gameId: String!
        playerId: ID!
        player: Player!
        name: String!
        records: [RankedRecord!]!
}
type RankedRecord {
        rank: Int!
        map: Map!
        player: Player!
        time: Int!
        respawnCount: Int!
        tryCount: Int!
        createdAt: NaiveDateTime!
        updatedAt: NaiveDateTime!
        flags: Int!
}
scalar NaiveDateTime
interface Node {
        id: ID!
}
schema {
        query: QueryRoot
}