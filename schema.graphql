type Banishment {
	id: Int!
	dateBan: NaiveDateTime!
	duration: Int!
	wasReprieved: Boolean!
	reason: String!
	player: Player!
	banishedBy: Player!
}


type CheckpointTimes {
	cpNum: Int!
	time: Int!
}

scalar Escaped

type Event {
	handle: String!
	cooldown: Int
	admins: [Player!]!
	categories: [EventCategory!]!
	editions: [EventEdition!]!
	lastEdition: EventEdition
	edition(editionId: Int!): EventEdition
}

type EventCategory {
	handle: String!
	name: String!
	bannerImgUrl: String
	hexColor: String
}

type EventEdition {
	id: Int!
	mappack: Mappack
	admins: [Player!]!
	event: Event!
	name: String!
	subtitle: String
	startDate: NaiveDateTime!
	bannerImgUrl: String
	expiresIn: Int
	player(login: String!): EventEditionPlayer!
	map(gameId: String!): EventEditionMap!
	categories: [EventCategory!]!
}

type EventEditionMap {
	edition: EventEdition!
	map: Map!
	records(rankSortBy: SortState, dateSortBy: SortState): [RankedRecord!]!
}

type EventEditionMapExt {
	map: Map!
	lastRank: Int!
	medalTimes: MedalTimes!
}

type EventEditionPlayer {
	player: Player!
	rank: Int!
	rankAvg: Float!
	mapFinished: Int!
	worstRank: Int!
	categorizedRanks: [EventEditionPlayerCategorizedRank!]!
	unfinishedMaps: [EventEditionMapExt!]!
}

type EventEditionPlayerCategorizedRank {
	categoryName: Escaped!
	bannerImgUrl: String
	hexColor: String
	nbMaps: Int!
	ranks: [EventEditionPlayerRank!]!
}

type EventEditionPlayerRank {
	rank: Int!
	time: Int!
	map: EventEditionMapExt!
}




type Map implements Node {
	id: ID!
	gameId: Escaped!
	playerId: ID!
	cpsNumber: Int
	player: Player!
	name: Escaped!
	relatedEventEditions: [EventEdition!]!
	medalFor(reqLogin: String!): MedalPrice
	ratings: [Rating!]!
	averageRating: [PlayerRating!]!
	records(rankSortBy: SortState, dateSortBy: SortState): [RankedRecord!]!
}

type MapConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [MapEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Map!]!
}

"""
An edge in a connection.
"""
type MapEdge {
	"""
	The item at the end of the edge
	"""
	node: Map!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type Mappack {
	nbMaps: Int!
	mxAuthor: String
	mxCreatedAt: NaiveDateTime
	mxName: String
	leaderboard: [MappackPlayer!]!
	player(login: String!): MappackPlayer!
	nextUpdateIn: Int
}

type MappackMap {
	rank: Int!
	lastRank: Int!
	map: Map!
}

type MappackPlayer {
	rank: Int!
	player: Player!
	ranks: [MappackMap!]!
	rankAvg: Float!
	mapFinished: Int!
	worstRank: Int!
	lastMedal: Medal
}

enum Medal {
	BRONZE
	SILVER
	GOLD
	CHAMPION
}

type MedalPrice {
	priceDate: NaiveDateTime!
	medal: Medal!
	map: Map!
	player: Player!
}

type MedalTimes {
	bronzeTime: Int!
	silverTime: Int!
	goldTime: Int!
	championTime: Int!
}

type MutationRoot {
	updateResourcesContent(text: String!): ResourcesContent!
	calcMappackScores(mappackId: String!): Mappack!
}

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

interface Node {
	id: ID!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Player implements Node {
	id: ID!
	login: Escaped!
	name: Escaped!
	zonePath: String
	banishments: [Banishment!]!
	role: PlayerRole!
	maps(after: String, before: String, first: Int, last: Int): MapConnection!
	records(dateSortBy: SortState): [RankedRecord!]!
}

type PlayerConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [PlayerEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Player!]!
}

"""
An edge in a connection.
"""
type PlayerEdge {
	"""
	The item at the end of the edge
	"""
	node: Player!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type PlayerRating {
	kind: RatingKind!
	rating: Float!
}

enum PlayerRole {
	PLAYER
	MODERATOR
	ADMIN
}

type QueryRoot {
	resourcesContent: ResourcesContent!
	eventEditionFromMxId(mxId: Int!): EventEdition
	mappack(mappackId: String!): Mappack!
	banishments: [Banishment!]!
	event(handle: String!): Event!
	events: [Event!]!
	players(after: String, before: String, first: Int, last: Int): PlayerConnection!
	maps(after: String, before: String, first: Int, last: Int): MapConnection!
	node(id: ID!): Node
	record(recordId: Int!): RankedRecord!
	map(gameId: String!): Map!
	player(login: String!): Player!
	records(dateSortBy: SortState): [RankedRecord!]!
}

type RankedRecord {
	id: Int!
	rank: Int!
	map: Map!
	player: Player!
	averageCpsTimes: [CheckpointTimes!]!
	cpsTimes: [CheckpointTimes!]!
	time: Int!
	respawnCount: Int!
	tryCount: Int!
	recordDate: NaiveDateTime!
	flags: Int!
}

type Rating {
	ratings: [PlayerRating!]!
	player: Player!
	map: Map!
	ratingDate: NaiveDateTime!
}

enum RatingKind {
	ROUTE
	DECO
	SMOOTHNESS
	DIFFICULTY
}

type ResourcesContent {
	content: String!
	lastModified: NaiveDateTime!
}

enum SortState {
	SORT
	REVERSE
}


directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: QueryRoot
	mutation: MutationRoot
}
